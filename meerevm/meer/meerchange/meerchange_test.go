package meerchange

import (
	"bytes"
	"encoding/hex"
	"github.com/Qitmeer/qng/common/hash"
	"github.com/Qitmeer/qng/params"
	"github.com/Qitmeer/qng/testutils/testprivatekey"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/crypto"
	"strings"
	"testing"
)

func TestMeerChangeExport(t *testing.T) {
	params.ActiveNetParams = &params.PrivNetParam
	pb, err := testprivatekey.NewBuilder(0)
	if err != nil {
		t.Fatal(err)
	}
	privateKeyHex := hex.EncodeToString(pb.Get(0))
	txid := hash.MustHexToDecodedHash("0")
	dataHash := CalcExportHash(&txid, 0, 123)
	sig, err := CalcExportSig(dataHash, privateKeyHex)
	if err != nil {
		t.Fatal(err)
	}
	sigPublicKey, err := crypto.Ecrecover(dataHash.Bytes(), sig)
	if err != nil {
		t.Fatal(err)
	}
	privateKey, err := crypto.HexToECDSA(privateKeyHex)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(sigPublicKey, crypto.FromECDSAPub(&privateKey.PublicKey)) {
		t.Fatalf("export sig error")
	}
}

func TestMeerChangeExportLog(t *testing.T) {
	lgData, err := hex.DecodeString("86f227a1220d60b7287ea5c4e844b57c9e19af9c22557f581f88ac312d5f98040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008430786232363438343635316136366565613337316461633137393837663137366235393631626165333931363961623434313931613934626339633366396631656131356261323938636232663331386265343064336533366538613965393962613537383862363633386538316166653364646632316234313663366236663931303000000000000000000000000000000000000000000000000000000000")
	if err != nil {
		t.Fatal(err)
	}
	ccExportEvent, err := NewMeerchangeExportDataByLog(lgData)
	if err != nil {
		t.Fatal(err)
	}
	op, err := ccExportEvent.GetOutPoint()
	if err != nil {
		t.Fatal(err)
	}
	t.Log("outpoint", "txid", op.Hash.String(), "idx", op.OutIndex, "fee", ccExportEvent.Opt.Fee, "sig", ccExportEvent.Opt.Sig)
}

func TestMeerChangeExportInput(t *testing.T) {
	inputData, err := hex.DecodeString("9801767c86f227a1220d60b7287ea5c4e844b57c9e19af9c22557f581f88ac312d5f98040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008430786232363438343635316136366565613337316461633137393837663137366235393631626165333931363961623434313931613934626339633366396631656131356261323938636232663331386265343064336533366538613965393962613537383862363633386538316166653364646632316234313663366236663931303000000000000000000000000000000000000000000000000000000000")
	if err != nil {
		t.Fatal(err)
	}
	ccExportEvent, err := NewMeerchangeExportDataByInput(inputData)
	if err != nil {
		t.Fatal(err)
	}
	op, err := ccExportEvent.GetOutPoint()
	if err != nil {
		t.Fatal(err)
	}
	t.Log("outpoint", "txid", op.Hash.String(), "idx", op.OutIndex, "fee", ccExportEvent.Opt.Fee, "sig", ccExportEvent.Opt.Sig)
}

func TestMeerChangeImportLog(t *testing.T) {
	topicHex := "0xb9ba2e23b17fbc3f0029c3a6600ef2dd4484bea87a99c7aab54caf84dedcf96b"

	if topicHex != LogImportSigHash.String() {
		t.Fatalf("import log error:%s expect:%s", topicHex, LogImportSigHash.String())
	}
}

func TestMeerChangeImportInput(t *testing.T) {
	data, err := hex.DecodeString("a8770e69")
	if err != nil {
		t.Fatal(err)
	}
	if len(data) < 4 {
		t.Fatalf("input data format error")
	}
	contractAbi, err := abi.JSON(strings.NewReader(MeerchangeMetaData.ABI))
	if err != nil {
		t.Fatal(err)
	}

	method, err := contractAbi.MethodById(data[:4])
	if err != nil {
		t.Fatal(err)
	}
	funcName := (&MeerchangeImportData{}).GetFuncName()
	if method.Name != funcName {
		t.Fatalf("Inconsistent methods and parameters:%s, expect:%s", method.Name, funcName)
	}
}

func TestMeerChangeFromEntrypoint(t *testing.T) {
	/*params.PrivNetParam.MeerChangeContractAddr = "0x422f6f90b35d91d7d4f03ac791c6c07b1c14af1f"
	params.ActiveNetParams = &params.PrivNetParam
	txHash := "0xf78c00c2c5bea146da19c834f2e2a61f6554382d213a4df7995a6c0a88ba3cfa"
	txHexStr := "0x02f90533821fc30d8459682f008459682f0e83989680945ff137d4b0fdcd49dca30c7cf57e578a026d278980b904c41fad948c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000d21934ed8eaf27a67f0a70042af50a1d6d195e81000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000001cb3ae081b46195f874b3043ec0a79f20ff43d7e000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000b9980000000000000000000000000000000000000000000000000000000499c09f890000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e4b61d27f6000000000000000000000000422f6f90b35d91d7d4f03ac791c6c07b1c14af1f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001449801767c2c38d42aa4bca9f5c855647496db95401ca8615fd46e8449479147d5b3637ffee9baac7dc6a378caeeeffa5586e5214547ae00fb60bf49e0e50db7cca7d56dbf97f55dacbd8b4b57e0247c4803ff4f1e50336b3fdf2209dfa490993cb0ca1b00000000000000000000000000000000000000000000000000000000000000c080a07e160802b168fe1b06a4abd6960b77aed03372f32964036db0c9e3c21b01b0eda0178fc40f208b76022b6f5eb079fdb47033192afd82b73536311795155b7d63c2"
	txb := common.FromHex(txHexStr)
	var tx = &types.Transaction{}
	if err := tx.UnmarshalBinary(txb); err != nil {
		t.Fatal(err)
	}
	if tx.Hash().String() != txHash {
		t.Fatal("tx hash error")
	}
	t.Logf("Unmarshal tx:%s", tx.Hash().String())
	//
	if !IsEntrypointExportTx(tx) ||
		!IsMeerChangeTx(tx) ||
		!IsExportTx(tx) {
		t.Fatal("tx is not meerchang export from entrypoint")
	}
	ed, err := NewEntrypointExportDataByInput(tx.Data())
	if err != nil {
		t.Fatal(err)
	}
	op, err := ed.GetOutPoint()
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("MeerChange::%s, txid:%s, idx:%d, fee:%d, sig:%s", ed.GetFuncName(), op.Hash.String(), op.OutIndex, ed.Opt.Fee, ed.Opt.Sig)*/
}
